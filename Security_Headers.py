import requests
import argparse
import threading
from colorama import Fore, init
import prettytable

# Initialize colorama
init(autoreset=True)

# Define the OWASP recommended security headers
owasp_headers = [
    "Strict-Transport-Security",
    "X-Frame-Options",
    "X-XSS-Protection",
    "X-Content-Type-Options",
    "Referrer-Policy",
    "Content-Security-Policy",
    "Feature-Policy"
]

# Define the colors for the output
GREEN = Fore.GREEN
YELLOW = Fore.YELLOW
RED = Fore.RED
RESET = Fore.RESET

# Function to check if a header is compliant with OWASP
def check_header(header, value):
    if header == "Strict-Transport-Security":
        if "max-age=" in value and "includeSubDomains" in value and "preload" not in value:
            return True
    elif header == "X-Frame-Options":
        if value == "DENY" or value == "SAMEORIGIN":
            return True
    elif header == "X-XSS-Protection":
        if value == "1; mode=block":
            return True
    elif header == "X-Content-Type-Options":
        if value == "nosniff":
            return True
    elif header == "Referrer-Policy":
        if value in ["no-referrer", "no-referrer-when-downgrade", "same-origin", "origin", "strict-origin", "strict-origin-when-cross-origin"]:
            return True
    elif header == "Content-Security-Policy":
        if "default-src 'none'" in value and "img-src 'self'" in value and "script-src 'self'" in value and "style-src 'self'" in value and "object-src 'none'" in value and "base-uri 'self'" in value and "frame-ancestors 'none'" in value:
            return True
    elif header == "Feature-Policy":
        if "accelerometer 'none'" in value and "camera 'none'" in value and "geolocation 'none'" in value and "gyroscope 'none'" in value and "magnetometer 'none'" in value and "microphone 'none'" in value and "payment 'none'" in value and "usb 'none'" in value:
            return True
    return False

# Function to get the security headers of a URL
def get_headers(url):
    try:
        response = requests.get(url, timeout=5)
        headers = response.headers
        return headers
    except:
        return None

def print_results(header, value, compliant):
    if compliant:
        print(GREEN + header + ": " + value)
    elif value == "":
        print(RED + header + ": MISSING")
    else:
        print(YELLOW + header + ": " + value)

def analyze_headers(url):
    compliant_headers = []
    non_compliant_headers = []
    missing_headers = []

    headers = get_headers(url)
    if headers is None:
        print(RED + "ERROR: Could not connect to " + url)
        return
    for header in owasp_headers:
        value = headers.get(header, "")
        compliant = check_header(header, value)
        if compliant:
            compliant_headers.append(header + ": " + value)
        elif value == "":
            missing_headers.append(header + ": MISSING")
        else:
            non_compliant_headers.append(header + ": " + value)
   
    print_table(compliant_headers, non_compliant_headers, missing_headers)

def print_table(compliant_headers, non_compliant_headers, missing_headers):
    table = prettytable.PrettyTable(["Compliant", "Non-compliant", "Missing"])
    rows = max([len(compliant_headers), len(non_compliant_headers), len(missing_headers)])
    for i in range(rows):
        compliant = compliant_headers[i] if i < len(compliant_headers) else ""
        non_compliant = non_compliant_headers[i] if i < len(non_compliant_headers) else ""
        missing = missing_headers[i] if i < len(missing_headers) else ""
        table.add_row([compliant, non_compliant, missing])
    print(table)

def main():
    parser = argparse.ArgumentParser(description='Analyze the security headers of a target website.')
    parser.add_argument('-u', '--url', type=str, help='The URL of the target website.')
    parser.add_argument('-f', '--file', type=str, help='The file containing the list of target websites.')
    args = parser.parse_args()

    if args.url:
        print(GREEN + "Analyzing URL: " + args.url + RESET)
        thread = threading.Thread(target=analyze_headers, args=(args.url,))
        thread.start()
        return 

    if args.file:
        try:
            with open(args.file, 'r') as f:
                urls = f.readlines()
        except FileNotFoundError:
            print(RED + "ERROR: File not found.")
            return

        for url in urls:
            url = url.strip()
            print(GREEN + "Analyzing URL: " + url + RESET)
            thread = threading.Thread(target=analyze_headers, args=(url,))
            thread.start()
        return

    print(RED + "ERROR: Please specify a URL using the -u or --url option or a file using the -f or --file option.")       

if __name__ == '__main__':
    main()